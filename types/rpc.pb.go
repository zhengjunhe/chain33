// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package types

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1)
}

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 1196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0x6d, 0x6f, 0xdb, 0x36,
	0x10, 0xd6, 0x87, 0xad, 0x69, 0x58, 0xc7, 0x71, 0x98, 0x34, 0x6b, 0xb4, 0x15, 0x05, 0x04, 0x0c,
	0x1b, 0x30, 0x34, 0x49, 0xed, 0x25, 0xeb, 0xd6, 0x6e, 0x40, 0x9c, 0xd4, 0x8e, 0x31, 0xd7, 0x73,
	0x23, 0x77, 0x03, 0xf6, 0x8d, 0x91, 0x6f, 0x8e, 0x10, 0x59, 0x94, 0x45, 0x2a, 0xb6, 0x7f, 0xc2,
	0xfe, 0xf5, 0x40, 0x52, 0x2f, 0xa4, 0x25, 0x27, 0xd9, 0x37, 0xf3, 0xb9, 0x7b, 0x8e, 0x77, 0xbc,
	0x37, 0x0b, 0x6d, 0xc6, 0x91, 0x77, 0x18, 0xc5, 0x94, 0x53, 0xfc, 0x25, 0x5f, 0x46, 0xc0, 0xec,
	0x9a, 0x47, 0xa7, 0x53, 0x1a, 0x2a, 0xd0, 0xde, 0xe1, 0x31, 0x09, 0x19, 0xf1, 0xb8, 0x9f, 0x43,
	0x8d, 0xeb, 0x80, 0x7a, 0xb7, 0xde, 0x0d, 0xf1, 0x33, 0xa4, 0x36, 0x27, 0x41, 0x00, 0x3c, 0x3d,
	0x6d, 0x46, 0xcd, 0x28, 0xfd, 0xb9, 0x45, 0x3c, 0x8f, 0x26, 0x61, 0x26, 0xa9, 0xc3, 0x02, 0xbc,
	0x84, 0xd3, 0x58, 0x9d, 0x9b, 0xff, 0x7e, 0x8d, 0x36, 0xa4, 0x9d, 0x56, 0x0b, 0xbf, 0x46, 0x9b,
	0x5d, 0xe0, 0x6d, 0x61, 0x9a, 0xe1, 0xc6, 0xa1, 0xf4, 0xe5, 0xf0, 0x0a, 0x66, 0x0a, 0xb1, 0x6b,
	0x39, 0x12, 0x05, 0x4b, 0xc7, 0xc2, 0x47, 0x68, 0xab, 0x0b, 0xbc, 0x4f, 0x18, 0xbf, 0x04, 0x32,
	0x86, 0x18, 0x6f, 0x15, 0x94, 0x81, 0x1f, 0xd8, 0xd9, 0x51, 0x49, 0x1d, 0x0b, 0xff, 0x82, 0xf6,
	0xce, 0x63, 0x20, 0x1c, 0xae, 0xc8, 0x7c, 0x54, 0xc4, 0x84, 0xb7, 0x53, 0x45, 0x25, 0x1c, 0x2d,
	0xec, 0x0c, 0xf8, 0x1c, 0x32, 0x7f, 0x12, 0x8e, 0x16, 0x8e, 0x85, 0x2f, 0x50, 0xa3, 0xe0, 0x2e,
	0xba, 0x31, 0x4d, 0x22, 0xfc, 0xd2, 0xe4, 0x15, 0x16, 0xa5, 0xb8, 0xca, 0xca, 0x6f, 0xa8, 0xf1,
	0x29, 0x81, 0x78, 0xa9, 0xdf, 0x5e, 0x2f, 0xbc, 0xbe, 0x24, 0xec, 0xc6, 0x7e, 0x91, 0x9e, 0x35,
	0x9d, 0x0b, 0xe0, 0xc4, 0x0f, 0x1c, 0x0b, 0x9f, 0xa0, 0x6d, 0x17, 0xc2, 0xb1, 0x4e, 0xc7, 0x65,
	0xf5, 0xd2, 0x4b, 0xfd, 0x8a, 0xf6, 0xba, 0xc0, 0x35, 0x8d, 0xf6, 0xf2, 0x6c, 0x3c, 0x8e, 0xf5,
	0xab, 0xc5, 0xd9, 0xde, 0xd5, 0x79, 0xa3, 0x45, 0x2f, 0xfc, 0x87, 0x32, 0xc7, 0xc2, 0x5d, 0xb4,
	0xbf, 0x4a, 0x17, 0x9e, 0x82, 0x91, 0x24, 0x85, 0xd8, 0x07, 0xeb, 0xbc, 0x17, 0x86, 0xde, 0x22,
	0xd4, 0x05, 0xfe, 0x11, 0xa6, 0x43, 0x4a, 0x03, 0xbc, 0x57, 0x90, 0x15, 0x1a, 0x51, 0x1a, 0xd8,
	0xd8, 0xf4, 0xa1, 0xef, 0x33, 0x2e, 0x03, 0x7f, 0xd6, 0x05, 0x7e, 0xa6, 0x4a, 0x89, 0xad, 0x66,
	0xfa, 0x79, 0x7a, 0xfc, 0x4b, 0xd6, 0x60, 0xa6, 0x25, 0x33, 0x8e, 0x0a, 0xda, 0xca, 0x85, 0x29,
	0x6a, 0xef, 0x55, 0x91, 0x15, 0x77, 0x00, 0xf3, 0x0a, 0x6e, 0x81, 0xae, 0xe5, 0x5e, 0xa1, 0xe7,
	0x0a, 0xd2, 0x9e, 0x41, 0x44, 0x82, 0x5f, 0x15, 0x66, 0x2a, 0x15, 0xec, 0x7d, 0xc3, 0xe2, 0x68,
	0x51, 0x3c, 0x5e, 0x07, 0x6d, 0xf5, 0xa6, 0x11, 0x8d, 0xf9, 0x30, 0xf6, 0xef, 0x6e, 0x61, 0x99,
	0x97, 0x5f, 0x6e, 0xcb, 0x10, 0xaf, 0xf5, 0xad, 0x8d, 0xb6, 0x64, 0x0d, 0x51, 0x91, 0x72, 0x60,
	0xac, 0x6c, 0xc7, 0x10, 0xdb, 0x0d, 0x3d, 0x21, 0x22, 0xcb, 0x8e, 0x85, 0x9b, 0xe8, 0xa9, 0x2b,
	0xbc, 0xeb, 0x00, 0xe0, 0xfd, 0x32, 0x9d, 0x77, 0x00, 0x4a, 0x45, 0xf8, 0x0e, 0x6d, 0xb8, 0xa2,
	0x5d, 0xaf, 0x03, 0xfc, 0xa2, 0x82, 0xd2, 0x27, 0xd7, 0x10, 0xdc, 0xe3, 0x74, 0xed, 0x23, 0xc4,
	0x13, 0x68, 0x93, 0x80, 0x84, 0x1e, 0xe0, 0x6f, 0x56, 0x2d, 0xe8, 0x52, 0xb3, 0x86, 0x54, 0x61,
	0x3a, 0x16, 0x3e, 0x45, 0x9b, 0x2e, 0xf0, 0x21, 0x61, 0x6c, 0x3e, 0xc6, 0x07, 0x15, 0x2e, 0x28,
	0x51, 0xc9, 0xf1, 0x6f, 0xd1, 0x17, 0x7d, 0xea, 0xdd, 0xae, 0x16, 0xdd, 0xaa, 0xda, 0x6b, 0xf4,
	0xe4, 0x73, 0x28, 0x15, 0x77, 0x8d, 0x20, 0x14, 0x58, 0x52, 0x3f, 0x41, 0xf5, 0x74, 0x7a, 0x65,
	0xfd, 0xb0, 0x62, 0xbf, 0xba, 0x11, 0xde, 0xa3, 0x5a, 0x17, 0xf8, 0x30, 0xa6, 0x11, 0xc4, 0xe2,
	0xf5, 0x8b, 0x96, 0x9d, 0xe5, 0x60, 0xde, 0x0f, 0x92, 0x9a, 0xc3, 0x8e, 0x85, 0x7f, 0x42, 0xdb,
	0x5d, 0xe0, 0x69, 0xc0, 0x9c, 0xf0, 0xa4, 0xd4, 0x4a, 0xa6, 0xef, 0x4a, 0x47, 0x36, 0x43, 0x23,
	0x1b, 0xcd, 0x7f, 0xdc, 0x41, 0x7c, 0xe7, 0xc3, 0xbc, 0x34, 0xb8, 0xb2, 0xdc, 0x19, 0x5a, 0xb2,
	0xeb, 0xc5, 0xa5, 0xa2, 0x9c, 0xaa, 0xa8, 0xc6, 0xe0, 0xd1, 0x95, 0x1c, 0x0b, 0xbf, 0x91, 0xc1,
	0x4a, 0x7b, 0xe2, 0x06, 0xdd, 0xd7, 0x5e, 0xc8, 0x2b, 0x2b, 0xf3, 0x0d, 0xda, 0xe8, 0x42, 0xe8,
	0x02, 0x8c, 0xf3, 0xc9, 0x98, 0x9e, 0xfb, 0x24, 0x9c, 0x98, 0x14, 0x81, 0x66, 0x14, 0xbe, 0x42,
	0x91, 0xe7, 0xf6, 0x72, 0x38, 0xaf, 0xa4, 0x1c, 0xa1, 0xa7, 0x2e, 0xb9, 0x03, 0xc9, 0xc9, 0x7c,
	0xcf, 0x00, 0x49, 0x5a, 0xcd, 0x76, 0x53, 0x0e, 0xa2, 0xac, 0x7a, 0x77, 0xb4, 0xdd, 0x96, 0x96,
	0x6c, 0xb6, 0x2c, 0xb4, 0xe1, 0xd5, 0x44, 0x48, 0x2e, 0x8b, 0x73, 0xb1, 0x1e, 0xf3, 0x01, 0x24,
	0x4f, 0x1f, 0xd2, 0x25, 0x5a, 0x75, 0x8f, 0x90, 0xa9, 0xec, 0x3d, 0x92, 0x73, 0x8a, 0xea, 0xea,
	0x1e, 0x1a, 0x32, 0x08, 0x59, 0xc2, 0x1e, 0xc9, 0xfb, 0x19, 0xed, 0x94, 0x36, 0x5f, 0x1e, 0x5a,
	0xb6, 0x4b, 0x7b, 0x61, 0xd5, 0x1e, 0x3c, 0x96, 0xc5, 0x7f, 0x09, 0x8b, 0xd1, 0x42, 0xed, 0x92,
	0x52, 0x31, 0xd5, 0xf2, 0xe5, 0xbd, 0x90, 0x8c, 0x13, 0xf4, 0xec, 0x22, 0x99, 0x46, 0xd9, 0xec,
	0xd3, 0x16, 0x8f, 0xcb, 0x63, 0x3f, 0x9c, 0x98, 0xed, 0xa2, 0x30, 0x55, 0xb7, 0x1a, 0x8d, 0x75,
	0xfc, 0xc0, 0x18, 0x58, 0x3a, 0x5e, 0x8a, 0xef, 0x3d, 0xc2, 0xc6, 0x44, 0xfd, 0x7f, 0xec, 0x43,
	0xb4, 0xf1, 0x27, 0xc4, 0x4c, 0xbc, 0xc9, 0x9a, 0xc6, 0x4e, 0xc5, 0x62, 0xcb, 0x3a, 0x16, 0xfe,
	0x0e, 0x3d, 0xe9, 0x31, 0x77, 0x19, 0x7a, 0x0f, 0xcd, 0x99, 0x53, 0xb9, 0x0a, 0x87, 0x00, 0xb1,
	0x60, 0xe6, 0xb9, 0x1a, 0x36, 0x87, 0x29, 0x7c, 0x05, 0xb3, 0xfc, 0xcd, 0xc5, 0x39, 0x9d, 0x1c,
	0x6f, 0xd1, 0xc6, 0x00, 0xb8, 0xe4, 0x7c, 0x65, 0x70, 0x52, 0x54, 0xd0, 0x32, 0xd7, 0x06, 0x74,
	0x0c, 0x29, 0x2c, 0xab, 0xbd, 0xde, 0x63, 0x03, 0x1e, 0x9d, 0x8b, 0x46, 0x7c, 0x8c, 0x8b, 0xc7,
	0xb2, 0xe3, 0x3b, 0x84, 0x93, 0xa0, 0x43, 0xfc, 0x20, 0x89, 0x61, 0x1d, 0xa3, 0x17, 0xf2, 0x56,
	0x53, 0xa6, 0x77, 0x2f, 0x9d, 0x86, 0xb2, 0xdb, 0x5d, 0x98, 0x25, 0x20, 0x3a, 0x65, 0x3d, 0xed,
	0xf4, 0x47, 0xc7, 0xc2, 0x2d, 0xb4, 0x23, 0x5b, 0x55, 0x69, 0x3f, 0x50, 0x4a, 0x19, 0xe9, 0x5d,
	0x31, 0xcb, 0xee, 0xf9, 0x23, 0xb3, 0xab, 0x4f, 0xb3, 0x62, 0x0b, 0x1f, 0xcb, 0x3f, 0x9d, 0x29,
	0xd9, 0x85, 0x19, 0x36, 0xac, 0xe7, 0xef, 0x9e, 0x45, 0xe1, 0x58, 0xf8, 0x07, 0x84, 0xce, 0x03,
	0xca, 0xe0, 0x53, 0x02, 0x09, 0x3c, 0xf4, 0x72, 0x1d, 0x19, 0xd0, 0x59, 0x10, 0x88, 0xae, 0xcb,
	0xc6, 0x85, 0xb6, 0x2e, 0x4d, 0x49, 0x3e, 0xe8, 0x4d, 0x58, 0xf6, 0xe6, 0xa6, 0xeb, 0x4f, 0x42,
	0xf9, 0x67, 0x55, 0xdf, 0x11, 0x39, 0x68, 0xee, 0x88, 0x1c, 0x76, 0x2c, 0xdc, 0x43, 0xb6, 0x6a,
	0xde, 0x01, 0x4d, 0xed, 0x55, 0xfd, 0xdd, 0x2c, 0x84, 0xf7, 0x98, 0x3a, 0x45, 0x35, 0x39, 0x59,
	0xae, 0x48, 0x38, 0x1e, 0x24, 0x53, 0x5c, 0xf4, 0xe8, 0x4c, 0x40, 0x32, 0x3b, 0x55, 0x43, 0xfc,
	0x7b, 0x39, 0x91, 0x3b, 0x34, 0x36, 0x96, 0xee, 0xef, 0xb0, 0x2c, 0xe5, 0xb2, 0x8d, 0xf0, 0xaa,
	0xb3, 0x0b, 0x96, 0x07, 0xac, 0x83, 0xeb, 0xbd, 0x3c, 0x97, 0xf5, 0x30, 0x24, 0x31, 0x11, 0xd3,
	0x68, 0xe4, 0xf3, 0x00, 0xf2, 0x0e, 0x11, 0x5d, 0xae, 0x0b, 0xf2, 0x25, 0xa7, 0xd0, 0xa2, 0x2e,
	0x7a, 0x68, 0xa7, 0x4f, 0xc9, 0x78, 0xad, 0x95, 0x4b, 0xf0, 0x27, 0x37, 0x3c, 0xb3, 0x72, 0x60,
	0x04, 0xad, 0x8b, 0x1c, 0x0b, 0x7f, 0x90, 0x35, 0x90, 0x59, 0x52, 0x52, 0xbd, 0x06, 0x4c, 0xc9,
	0x5a, 0x8f, 0x8e, 0xe5, 0xca, 0x51, 0x1f, 0x3f, 0x55, 0x9f, 0x53, 0x75, 0xe3, 0xf3, 0x88, 0x39,
	0x56, 0xfb, 0xd5, 0xdf, 0x2f, 0x27, 0x3e, 0xbf, 0x49, 0xae, 0x0f, 0x3d, 0x3a, 0x3d, 0x6a, 0xb5,
	0xbc, 0xf0, 0x28, 0xfd, 0x34, 0x3b, 0x92, 0xaa, 0xd7, 0x4f, 0xe4, 0x37, 0x5b, 0xeb, 0xbf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xbf, 0x4e, 0xac, 0xf9, 0x32, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DplatformClient is the client API for Dplatform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DplatformClient interface {
	// dplatform 对外提供服务的接口
	//区块链接口
	GetBlocks(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*Reply, error)
	//获取最新的区块头
	GetLastHeader(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Header, error)
	//交易接口
	CreateRawTransaction(ctx context.Context, in *CreateTx, opts ...grpc.CallOption) (*UnsignTx, error)
	CreateRawTxGroup(ctx context.Context, in *CreateTransactionGroup, opts ...grpc.CallOption) (*UnsignTx, error)
	// 根据哈希查询交易
	QueryTransaction(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*TransactionDetail, error)
	// 发送交易
	SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error)
	//通过地址获取交易信息
	GetTransactionByAddr(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*ReplyTxInfos, error)
	//通过哈希数组获取对应的交易
	GetTransactionByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*TransactionDetails, error)
	//缓存接口
	GetMemPool(ctx context.Context, in *ReqGetMempool, opts ...grpc.CallOption) (*ReplyTxList, error)
	//钱包接口
	//获取钱包账户信息
	GetAccounts(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletAccounts, error)
	//根据账户lable信息获取账户地址
	GetAccount(ctx context.Context, in *ReqGetAccount, opts ...grpc.CallOption) (*WalletAccount, error)
	//创建钱包账户
	NewAccount(ctx context.Context, in *ReqNewAccount, opts ...grpc.CallOption) (*WalletAccount, error)
	//获取钱包的交易列表
	WalletTransactionList(ctx context.Context, in *ReqWalletTransactionList, opts ...grpc.CallOption) (*WalletTxDetails, error)
	//导入钱包私钥
	ImportPrivkey(ctx context.Context, in *ReqWalletImportPrivkey, opts ...grpc.CallOption) (*WalletAccount, error)
	// 发送交易
	SendToAddress(ctx context.Context, in *ReqWalletSendToAddress, opts ...grpc.CallOption) (*ReplyHash, error)
	//设置交易手续费
	SetTxFee(ctx context.Context, in *ReqWalletSetFee, opts ...grpc.CallOption) (*Reply, error)
	//设置标签
	SetLabl(ctx context.Context, in *ReqWalletSetLabel, opts ...grpc.CallOption) (*WalletAccount, error)
	//合并钱包余额
	MergeBalance(ctx context.Context, in *ReqWalletMergeBalance, opts ...grpc.CallOption) (*ReplyHashes, error)
	//设置钱包密码
	SetPasswd(ctx context.Context, in *ReqWalletSetPasswd, opts ...grpc.CallOption) (*Reply, error)
	//给钱包上锁
	Lock(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error)
	//给钱包解锁
	UnLock(ctx context.Context, in *WalletUnLock, opts ...grpc.CallOption) (*Reply, error)
	//获取最新的Mempool
	GetLastMemPool(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ReplyTxList, error)
	//获取最新的ProperFee
	GetProperFee(ctx context.Context, in *ReqProperFee, opts ...grpc.CallOption) (*ReplyProperFee, error)
	// 获取钱包状态
	GetWalletStatus(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletStatus, error)
	//区块浏览器接口
	///
	GetBlockOverview(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*BlockOverview, error)
	GetAddrOverview(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*AddrOverview, error)
	GetBlockHash(ctx context.Context, in *ReqInt, opts ...grpc.CallOption) (*ReplyHash, error)
	// seed
	// 创建seed
	GenSeed(ctx context.Context, in *GenSeedLang, opts ...grpc.CallOption) (*ReplySeed, error)
	//获取seed
	GetSeed(ctx context.Context, in *GetSeedByPw, opts ...grpc.CallOption) (*ReplySeed, error)
	//保存seed
	SaveSeed(ctx context.Context, in *SaveSeedByPw, opts ...grpc.CallOption) (*Reply, error)
	// Balance Query
	//获取余额
	GetBalance(ctx context.Context, in *ReqBalance, opts ...grpc.CallOption) (*Accounts, error)
	QueryChain(ctx context.Context, in *ChainExecutor, opts ...grpc.CallOption) (*Reply, error)
	ExecWallet(ctx context.Context, in *ChainExecutor, opts ...grpc.CallOption) (*Reply, error)
	QueryConsensus(ctx context.Context, in *ChainExecutor, opts ...grpc.CallOption) (*Reply, error)
	CreateTransaction(ctx context.Context, in *CreateTxIn, opts ...grpc.CallOption) (*UnsignTx, error)
	//获取交易的十六进制编码
	GetHexTxByHash(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*HexTx, error)
	// 导出私钥
	DumpPrivkey(ctx context.Context, in *ReqString, opts ...grpc.CallOption) (*ReplyString, error)
	// 导出全部私钥到文件
	DumpPrivkeysFile(ctx context.Context, in *ReqPrivkeysFile, opts ...grpc.CallOption) (*Reply, error)
	// 从文件中批量导入私钥
	ImportPrivkeysFile(ctx context.Context, in *ReqPrivkeysFile, opts ...grpc.CallOption) (*Reply, error)
	//获取程序版本
	Version(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*VersionInfo, error)
	//是否同步
	IsSync(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error)
	//获取当前节点连接的其他节点信息
	GetPeerInfo(ctx context.Context, in *P2PGetPeerReq, opts ...grpc.CallOption) (*PeerList, error)
	//获取当前节点的网络信息
	NetInfo(ctx context.Context, in *P2PGetNetInfoReq, opts ...grpc.CallOption) (*NodeNetInfo, error)
	// ntpclock是否同步
	IsNtpClockSync(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error)
	//获取系统致命故障信息
	GetFatalFailure(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Int32, error)
	GetLastBlockSequence(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Int64, error)
	// get add block's sequence by hash
	GetSequenceByHash(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*Int64, error)
	//通过block hash 获取对应的blocks信息
	GetBlockByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*BlockDetails, error)
	//通过block seq 获取对应的blocks hash 信息
	GetBlockBySeq(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*BlockSeq, error)
	//关闭dplatform
	CloseQueue(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error)
	//获取地址所以合约下的余额
	GetAllExecBalance(ctx context.Context, in *ReqAllExecBalance, opts ...grpc.CallOption) (*AllExecBalance, error)
	//签名交易
	SignRawTx(ctx context.Context, in *ReqSignRawTx, opts ...grpc.CallOption) (*ReplySignRawTx, error)
	CreateNoBalanceTransaction(ctx context.Context, in *NoBalanceTx, opts ...grpc.CallOption) (*ReplySignRawTx, error)
	// 获取随机HASH
	QueryRandNum(ctx context.Context, in *ReqRandHash, opts ...grpc.CallOption) (*ReplyHash, error)
	// 获取是否达到fork高度
	GetFork(ctx context.Context, in *ReqKey, opts ...grpc.CallOption) (*Int64, error)
	CreateNoBalanceTxs(ctx context.Context, in *NoBalanceTxs, opts ...grpc.CallOption) (*ReplySignRawTx, error)
	//通过seq以及title获取对应平行连的交易
	GetParaTxByTitle(ctx context.Context, in *ReqParaTxByTitle, opts ...grpc.CallOption) (*ParaTxDetails, error)
	//获取拥有此title交易的区块高度
	LoadParaTxByTitle(ctx context.Context, in *ReqHeightByTitle, opts ...grpc.CallOption) (*ReplyHeightByTitle, error)
	//通过区块高度列表+title获取平行链交易
	GetParaTxByHeight(ctx context.Context, in *ReqParaTxByHeight, opts ...grpc.CallOption) (*ParaTxDetails, error)
	//获取区块头信息
	GetHeaders(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*Headers, error)
}

type dplatformClient struct {
	cc grpc.ClientConnInterface
}

func NewDplatformClient(cc grpc.ClientConnInterface) DplatformClient {
	return &dplatformClient{cc}
}

func (c *dplatformClient) GetBlocks(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetLastHeader(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Header, error) {
	out := new(Header)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetLastHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) CreateRawTransaction(ctx context.Context, in *CreateTx, opts ...grpc.CallOption) (*UnsignTx, error) {
	out := new(UnsignTx)
	err := c.cc.Invoke(ctx, "/types.dplatform/CreateRawTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) CreateRawTxGroup(ctx context.Context, in *CreateTransactionGroup, opts ...grpc.CallOption) (*UnsignTx, error) {
	out := new(UnsignTx)
	err := c.cc.Invoke(ctx, "/types.dplatform/CreateRawTxGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) QueryTransaction(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*TransactionDetail, error) {
	out := new(TransactionDetail)
	err := c.cc.Invoke(ctx, "/types.dplatform/QueryTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatform/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetTransactionByAddr(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*ReplyTxInfos, error) {
	out := new(ReplyTxInfos)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetTransactionByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetTransactionByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*TransactionDetails, error) {
	out := new(TransactionDetails)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetTransactionByHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetMemPool(ctx context.Context, in *ReqGetMempool, opts ...grpc.CallOption) (*ReplyTxList, error) {
	out := new(ReplyTxList)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetMemPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetAccounts(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletAccounts, error) {
	out := new(WalletAccounts)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetAccount(ctx context.Context, in *ReqGetAccount, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) NewAccount(ctx context.Context, in *ReqNewAccount, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := c.cc.Invoke(ctx, "/types.dplatform/NewAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) WalletTransactionList(ctx context.Context, in *ReqWalletTransactionList, opts ...grpc.CallOption) (*WalletTxDetails, error) {
	out := new(WalletTxDetails)
	err := c.cc.Invoke(ctx, "/types.dplatform/WalletTransactionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) ImportPrivkey(ctx context.Context, in *ReqWalletImportPrivkey, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := c.cc.Invoke(ctx, "/types.dplatform/ImportPrivkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) SendToAddress(ctx context.Context, in *ReqWalletSendToAddress, opts ...grpc.CallOption) (*ReplyHash, error) {
	out := new(ReplyHash)
	err := c.cc.Invoke(ctx, "/types.dplatform/SendToAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) SetTxFee(ctx context.Context, in *ReqWalletSetFee, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatform/SetTxFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) SetLabl(ctx context.Context, in *ReqWalletSetLabel, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := c.cc.Invoke(ctx, "/types.dplatform/SetLabl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) MergeBalance(ctx context.Context, in *ReqWalletMergeBalance, opts ...grpc.CallOption) (*ReplyHashes, error) {
	out := new(ReplyHashes)
	err := c.cc.Invoke(ctx, "/types.dplatform/MergeBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) SetPasswd(ctx context.Context, in *ReqWalletSetPasswd, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatform/SetPasswd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) Lock(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatform/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) UnLock(ctx context.Context, in *WalletUnLock, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatform/UnLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetLastMemPool(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ReplyTxList, error) {
	out := new(ReplyTxList)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetLastMemPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetProperFee(ctx context.Context, in *ReqProperFee, opts ...grpc.CallOption) (*ReplyProperFee, error) {
	out := new(ReplyProperFee)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetProperFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetWalletStatus(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletStatus, error) {
	out := new(WalletStatus)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetWalletStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetBlockOverview(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*BlockOverview, error) {
	out := new(BlockOverview)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetBlockOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetAddrOverview(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*AddrOverview, error) {
	out := new(AddrOverview)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetAddrOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetBlockHash(ctx context.Context, in *ReqInt, opts ...grpc.CallOption) (*ReplyHash, error) {
	out := new(ReplyHash)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GenSeed(ctx context.Context, in *GenSeedLang, opts ...grpc.CallOption) (*ReplySeed, error) {
	out := new(ReplySeed)
	err := c.cc.Invoke(ctx, "/types.dplatform/GenSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetSeed(ctx context.Context, in *GetSeedByPw, opts ...grpc.CallOption) (*ReplySeed, error) {
	out := new(ReplySeed)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) SaveSeed(ctx context.Context, in *SaveSeedByPw, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatform/SaveSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetBalance(ctx context.Context, in *ReqBalance, opts ...grpc.CallOption) (*Accounts, error) {
	out := new(Accounts)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) QueryChain(ctx context.Context, in *ChainExecutor, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatform/QueryChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) ExecWallet(ctx context.Context, in *ChainExecutor, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatform/ExecWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) QueryConsensus(ctx context.Context, in *ChainExecutor, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatform/QueryConsensus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) CreateTransaction(ctx context.Context, in *CreateTxIn, opts ...grpc.CallOption) (*UnsignTx, error) {
	out := new(UnsignTx)
	err := c.cc.Invoke(ctx, "/types.dplatform/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetHexTxByHash(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*HexTx, error) {
	out := new(HexTx)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetHexTxByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) DumpPrivkey(ctx context.Context, in *ReqString, opts ...grpc.CallOption) (*ReplyString, error) {
	out := new(ReplyString)
	err := c.cc.Invoke(ctx, "/types.dplatform/DumpPrivkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) DumpPrivkeysFile(ctx context.Context, in *ReqPrivkeysFile, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatform/DumpPrivkeysFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) ImportPrivkeysFile(ctx context.Context, in *ReqPrivkeysFile, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatform/ImportPrivkeysFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) Version(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*VersionInfo, error) {
	out := new(VersionInfo)
	err := c.cc.Invoke(ctx, "/types.dplatform/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) IsSync(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatform/IsSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetPeerInfo(ctx context.Context, in *P2PGetPeerReq, opts ...grpc.CallOption) (*PeerList, error) {
	out := new(PeerList)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetPeerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) NetInfo(ctx context.Context, in *P2PGetNetInfoReq, opts ...grpc.CallOption) (*NodeNetInfo, error) {
	out := new(NodeNetInfo)
	err := c.cc.Invoke(ctx, "/types.dplatform/NetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) IsNtpClockSync(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatform/IsNtpClockSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetFatalFailure(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Int32, error) {
	out := new(Int32)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetFatalFailure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetLastBlockSequence(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetLastBlockSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetSequenceByHash(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetSequenceByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetBlockByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*BlockDetails, error) {
	out := new(BlockDetails)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetBlockByHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetBlockBySeq(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*BlockSeq, error) {
	out := new(BlockSeq)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetBlockBySeq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) CloseQueue(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatform/CloseQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetAllExecBalance(ctx context.Context, in *ReqAllExecBalance, opts ...grpc.CallOption) (*AllExecBalance, error) {
	out := new(AllExecBalance)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetAllExecBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) SignRawTx(ctx context.Context, in *ReqSignRawTx, opts ...grpc.CallOption) (*ReplySignRawTx, error) {
	out := new(ReplySignRawTx)
	err := c.cc.Invoke(ctx, "/types.dplatform/SignRawTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) CreateNoBalanceTransaction(ctx context.Context, in *NoBalanceTx, opts ...grpc.CallOption) (*ReplySignRawTx, error) {
	out := new(ReplySignRawTx)
	err := c.cc.Invoke(ctx, "/types.dplatform/CreateNoBalanceTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) QueryRandNum(ctx context.Context, in *ReqRandHash, opts ...grpc.CallOption) (*ReplyHash, error) {
	out := new(ReplyHash)
	err := c.cc.Invoke(ctx, "/types.dplatform/QueryRandNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetFork(ctx context.Context, in *ReqKey, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetFork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) CreateNoBalanceTxs(ctx context.Context, in *NoBalanceTxs, opts ...grpc.CallOption) (*ReplySignRawTx, error) {
	out := new(ReplySignRawTx)
	err := c.cc.Invoke(ctx, "/types.dplatform/CreateNoBalanceTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetParaTxByTitle(ctx context.Context, in *ReqParaTxByTitle, opts ...grpc.CallOption) (*ParaTxDetails, error) {
	out := new(ParaTxDetails)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetParaTxByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) LoadParaTxByTitle(ctx context.Context, in *ReqHeightByTitle, opts ...grpc.CallOption) (*ReplyHeightByTitle, error) {
	out := new(ReplyHeightByTitle)
	err := c.cc.Invoke(ctx, "/types.dplatform/LoadParaTxByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetParaTxByHeight(ctx context.Context, in *ReqParaTxByHeight, opts ...grpc.CallOption) (*ParaTxDetails, error) {
	out := new(ParaTxDetails)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetParaTxByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformClient) GetHeaders(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*Headers, error) {
	out := new(Headers)
	err := c.cc.Invoke(ctx, "/types.dplatform/GetHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DplatformServer is the server API for Dplatform service.
type DplatformServer interface {
	// dplatform 对外提供服务的接口
	//区块链接口
	GetBlocks(context.Context, *ReqBlocks) (*Reply, error)
	//获取最新的区块头
	GetLastHeader(context.Context, *ReqNil) (*Header, error)
	//交易接口
	CreateRawTransaction(context.Context, *CreateTx) (*UnsignTx, error)
	CreateRawTxGroup(context.Context, *CreateTransactionGroup) (*UnsignTx, error)
	// 根据哈希查询交易
	QueryTransaction(context.Context, *ReqHash) (*TransactionDetail, error)
	// 发送交易
	SendTransaction(context.Context, *Transaction) (*Reply, error)
	//通过地址获取交易信息
	GetTransactionByAddr(context.Context, *ReqAddr) (*ReplyTxInfos, error)
	//通过哈希数组获取对应的交易
	GetTransactionByHashes(context.Context, *ReqHashes) (*TransactionDetails, error)
	//缓存接口
	GetMemPool(context.Context, *ReqGetMempool) (*ReplyTxList, error)
	//钱包接口
	//获取钱包账户信息
	GetAccounts(context.Context, *ReqNil) (*WalletAccounts, error)
	//根据账户lable信息获取账户地址
	GetAccount(context.Context, *ReqGetAccount) (*WalletAccount, error)
	//创建钱包账户
	NewAccount(context.Context, *ReqNewAccount) (*WalletAccount, error)
	//获取钱包的交易列表
	WalletTransactionList(context.Context, *ReqWalletTransactionList) (*WalletTxDetails, error)
	//导入钱包私钥
	ImportPrivkey(context.Context, *ReqWalletImportPrivkey) (*WalletAccount, error)
	// 发送交易
	SendToAddress(context.Context, *ReqWalletSendToAddress) (*ReplyHash, error)
	//设置交易手续费
	SetTxFee(context.Context, *ReqWalletSetFee) (*Reply, error)
	//设置标签
	SetLabl(context.Context, *ReqWalletSetLabel) (*WalletAccount, error)
	//合并钱包余额
	MergeBalance(context.Context, *ReqWalletMergeBalance) (*ReplyHashes, error)
	//设置钱包密码
	SetPasswd(context.Context, *ReqWalletSetPasswd) (*Reply, error)
	//给钱包上锁
	Lock(context.Context, *ReqNil) (*Reply, error)
	//给钱包解锁
	UnLock(context.Context, *WalletUnLock) (*Reply, error)
	//获取最新的Mempool
	GetLastMemPool(context.Context, *ReqNil) (*ReplyTxList, error)
	//获取最新的ProperFee
	GetProperFee(context.Context, *ReqProperFee) (*ReplyProperFee, error)
	// 获取钱包状态
	GetWalletStatus(context.Context, *ReqNil) (*WalletStatus, error)
	//区块浏览器接口
	///
	GetBlockOverview(context.Context, *ReqHash) (*BlockOverview, error)
	GetAddrOverview(context.Context, *ReqAddr) (*AddrOverview, error)
	GetBlockHash(context.Context, *ReqInt) (*ReplyHash, error)
	// seed
	// 创建seed
	GenSeed(context.Context, *GenSeedLang) (*ReplySeed, error)
	//获取seed
	GetSeed(context.Context, *GetSeedByPw) (*ReplySeed, error)
	//保存seed
	SaveSeed(context.Context, *SaveSeedByPw) (*Reply, error)
	// Balance Query
	//获取余额
	GetBalance(context.Context, *ReqBalance) (*Accounts, error)
	QueryChain(context.Context, *ChainExecutor) (*Reply, error)
	ExecWallet(context.Context, *ChainExecutor) (*Reply, error)
	QueryConsensus(context.Context, *ChainExecutor) (*Reply, error)
	CreateTransaction(context.Context, *CreateTxIn) (*UnsignTx, error)
	//获取交易的十六进制编码
	GetHexTxByHash(context.Context, *ReqHash) (*HexTx, error)
	// 导出私钥
	DumpPrivkey(context.Context, *ReqString) (*ReplyString, error)
	// 导出全部私钥到文件
	DumpPrivkeysFile(context.Context, *ReqPrivkeysFile) (*Reply, error)
	// 从文件中批量导入私钥
	ImportPrivkeysFile(context.Context, *ReqPrivkeysFile) (*Reply, error)
	//获取程序版本
	Version(context.Context, *ReqNil) (*VersionInfo, error)
	//是否同步
	IsSync(context.Context, *ReqNil) (*Reply, error)
	//获取当前节点连接的其他节点信息
	GetPeerInfo(context.Context, *P2PGetPeerReq) (*PeerList, error)
	//获取当前节点的网络信息
	NetInfo(context.Context, *P2PGetNetInfoReq) (*NodeNetInfo, error)
	// ntpclock是否同步
	IsNtpClockSync(context.Context, *ReqNil) (*Reply, error)
	//获取系统致命故障信息
	GetFatalFailure(context.Context, *ReqNil) (*Int32, error)
	GetLastBlockSequence(context.Context, *ReqNil) (*Int64, error)
	// get add block's sequence by hash
	GetSequenceByHash(context.Context, *ReqHash) (*Int64, error)
	//通过block hash 获取对应的blocks信息
	GetBlockByHashes(context.Context, *ReqHashes) (*BlockDetails, error)
	//通过block seq 获取对应的blocks hash 信息
	GetBlockBySeq(context.Context, *Int64) (*BlockSeq, error)
	//关闭dplatform
	CloseQueue(context.Context, *ReqNil) (*Reply, error)
	//获取地址所以合约下的余额
	GetAllExecBalance(context.Context, *ReqAllExecBalance) (*AllExecBalance, error)
	//签名交易
	SignRawTx(context.Context, *ReqSignRawTx) (*ReplySignRawTx, error)
	CreateNoBalanceTransaction(context.Context, *NoBalanceTx) (*ReplySignRawTx, error)
	// 获取随机HASH
	QueryRandNum(context.Context, *ReqRandHash) (*ReplyHash, error)
	// 获取是否达到fork高度
	GetFork(context.Context, *ReqKey) (*Int64, error)
	CreateNoBalanceTxs(context.Context, *NoBalanceTxs) (*ReplySignRawTx, error)
	//通过seq以及title获取对应平行连的交易
	GetParaTxByTitle(context.Context, *ReqParaTxByTitle) (*ParaTxDetails, error)
	//获取拥有此title交易的区块高度
	LoadParaTxByTitle(context.Context, *ReqHeightByTitle) (*ReplyHeightByTitle, error)
	//通过区块高度列表+title获取平行链交易
	GetParaTxByHeight(context.Context, *ReqParaTxByHeight) (*ParaTxDetails, error)
	//获取区块头信息
	GetHeaders(context.Context, *ReqBlocks) (*Headers, error)
}

// UnimplementedDplatformServer can be embedded to have forward compatible implementations.
type UnimplementedDplatformServer struct {
}

func (*UnimplementedDplatformServer) GetBlocks(ctx context.Context, req *ReqBlocks) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (*UnimplementedDplatformServer) GetLastHeader(ctx context.Context, req *ReqNil) (*Header, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastHeader not implemented")
}
func (*UnimplementedDplatformServer) CreateRawTransaction(ctx context.Context, req *CreateTx) (*UnsignTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRawTransaction not implemented")
}
func (*UnimplementedDplatformServer) CreateRawTxGroup(ctx context.Context, req *CreateTransactionGroup) (*UnsignTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRawTxGroup not implemented")
}
func (*UnimplementedDplatformServer) QueryTransaction(ctx context.Context, req *ReqHash) (*TransactionDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTransaction not implemented")
}
func (*UnimplementedDplatformServer) SendTransaction(ctx context.Context, req *Transaction) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (*UnimplementedDplatformServer) GetTransactionByAddr(ctx context.Context, req *ReqAddr) (*ReplyTxInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByAddr not implemented")
}
func (*UnimplementedDplatformServer) GetTransactionByHashes(ctx context.Context, req *ReqHashes) (*TransactionDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByHashes not implemented")
}
func (*UnimplementedDplatformServer) GetMemPool(ctx context.Context, req *ReqGetMempool) (*ReplyTxList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemPool not implemented")
}
func (*UnimplementedDplatformServer) GetAccounts(ctx context.Context, req *ReqNil) (*WalletAccounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (*UnimplementedDplatformServer) GetAccount(ctx context.Context, req *ReqGetAccount) (*WalletAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedDplatformServer) NewAccount(ctx context.Context, req *ReqNewAccount) (*WalletAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAccount not implemented")
}
func (*UnimplementedDplatformServer) WalletTransactionList(ctx context.Context, req *ReqWalletTransactionList) (*WalletTxDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletTransactionList not implemented")
}
func (*UnimplementedDplatformServer) ImportPrivkey(ctx context.Context, req *ReqWalletImportPrivkey) (*WalletAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportPrivkey not implemented")
}
func (*UnimplementedDplatformServer) SendToAddress(ctx context.Context, req *ReqWalletSendToAddress) (*ReplyHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToAddress not implemented")
}
func (*UnimplementedDplatformServer) SetTxFee(ctx context.Context, req *ReqWalletSetFee) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTxFee not implemented")
}
func (*UnimplementedDplatformServer) SetLabl(ctx context.Context, req *ReqWalletSetLabel) (*WalletAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLabl not implemented")
}
func (*UnimplementedDplatformServer) MergeBalance(ctx context.Context, req *ReqWalletMergeBalance) (*ReplyHashes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeBalance not implemented")
}
func (*UnimplementedDplatformServer) SetPasswd(ctx context.Context, req *ReqWalletSetPasswd) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPasswd not implemented")
}
func (*UnimplementedDplatformServer) Lock(ctx context.Context, req *ReqNil) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (*UnimplementedDplatformServer) UnLock(ctx context.Context, req *WalletUnLock) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLock not implemented")
}
func (*UnimplementedDplatformServer) GetLastMemPool(ctx context.Context, req *ReqNil) (*ReplyTxList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastMemPool not implemented")
}
func (*UnimplementedDplatformServer) GetProperFee(ctx context.Context, req *ReqProperFee) (*ReplyProperFee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProperFee not implemented")
}
func (*UnimplementedDplatformServer) GetWalletStatus(ctx context.Context, req *ReqNil) (*WalletStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletStatus not implemented")
}
func (*UnimplementedDplatformServer) GetBlockOverview(ctx context.Context, req *ReqHash) (*BlockOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockOverview not implemented")
}
func (*UnimplementedDplatformServer) GetAddrOverview(ctx context.Context, req *ReqAddr) (*AddrOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddrOverview not implemented")
}
func (*UnimplementedDplatformServer) GetBlockHash(ctx context.Context, req *ReqInt) (*ReplyHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHash not implemented")
}
func (*UnimplementedDplatformServer) GenSeed(ctx context.Context, req *GenSeedLang) (*ReplySeed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenSeed not implemented")
}
func (*UnimplementedDplatformServer) GetSeed(ctx context.Context, req *GetSeedByPw) (*ReplySeed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeed not implemented")
}
func (*UnimplementedDplatformServer) SaveSeed(ctx context.Context, req *SaveSeedByPw) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSeed not implemented")
}
func (*UnimplementedDplatformServer) GetBalance(ctx context.Context, req *ReqBalance) (*Accounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (*UnimplementedDplatformServer) QueryChain(ctx context.Context, req *ChainExecutor) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChain not implemented")
}
func (*UnimplementedDplatformServer) ExecWallet(ctx context.Context, req *ChainExecutor) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecWallet not implemented")
}
func (*UnimplementedDplatformServer) QueryConsensus(ctx context.Context, req *ChainExecutor) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryConsensus not implemented")
}
func (*UnimplementedDplatformServer) CreateTransaction(ctx context.Context, req *CreateTxIn) (*UnsignTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (*UnimplementedDplatformServer) GetHexTxByHash(ctx context.Context, req *ReqHash) (*HexTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHexTxByHash not implemented")
}
func (*UnimplementedDplatformServer) DumpPrivkey(ctx context.Context, req *ReqString) (*ReplyString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpPrivkey not implemented")
}
func (*UnimplementedDplatformServer) DumpPrivkeysFile(ctx context.Context, req *ReqPrivkeysFile) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpPrivkeysFile not implemented")
}
func (*UnimplementedDplatformServer) ImportPrivkeysFile(ctx context.Context, req *ReqPrivkeysFile) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportPrivkeysFile not implemented")
}
func (*UnimplementedDplatformServer) Version(ctx context.Context, req *ReqNil) (*VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedDplatformServer) IsSync(ctx context.Context, req *ReqNil) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSync not implemented")
}
func (*UnimplementedDplatformServer) GetPeerInfo(ctx context.Context, req *P2PGetPeerReq) (*PeerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerInfo not implemented")
}
func (*UnimplementedDplatformServer) NetInfo(ctx context.Context, req *P2PGetNetInfoReq) (*NodeNetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetInfo not implemented")
}
func (*UnimplementedDplatformServer) IsNtpClockSync(ctx context.Context, req *ReqNil) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsNtpClockSync not implemented")
}
func (*UnimplementedDplatformServer) GetFatalFailure(ctx context.Context, req *ReqNil) (*Int32, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFatalFailure not implemented")
}
func (*UnimplementedDplatformServer) GetLastBlockSequence(ctx context.Context, req *ReqNil) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastBlockSequence not implemented")
}
func (*UnimplementedDplatformServer) GetSequenceByHash(ctx context.Context, req *ReqHash) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSequenceByHash not implemented")
}
func (*UnimplementedDplatformServer) GetBlockByHashes(ctx context.Context, req *ReqHashes) (*BlockDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHashes not implemented")
}
func (*UnimplementedDplatformServer) GetBlockBySeq(ctx context.Context, req *Int64) (*BlockSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockBySeq not implemented")
}
func (*UnimplementedDplatformServer) CloseQueue(ctx context.Context, req *ReqNil) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseQueue not implemented")
}
func (*UnimplementedDplatformServer) GetAllExecBalance(ctx context.Context, req *ReqAllExecBalance) (*AllExecBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllExecBalance not implemented")
}
func (*UnimplementedDplatformServer) SignRawTx(ctx context.Context, req *ReqSignRawTx) (*ReplySignRawTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignRawTx not implemented")
}
func (*UnimplementedDplatformServer) CreateNoBalanceTransaction(ctx context.Context, req *NoBalanceTx) (*ReplySignRawTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNoBalanceTransaction not implemented")
}
func (*UnimplementedDplatformServer) QueryRandNum(ctx context.Context, req *ReqRandHash) (*ReplyHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRandNum not implemented")
}
func (*UnimplementedDplatformServer) GetFork(ctx context.Context, req *ReqKey) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFork not implemented")
}
func (*UnimplementedDplatformServer) CreateNoBalanceTxs(ctx context.Context, req *NoBalanceTxs) (*ReplySignRawTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNoBalanceTxs not implemented")
}
func (*UnimplementedDplatformServer) GetParaTxByTitle(ctx context.Context, req *ReqParaTxByTitle) (*ParaTxDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParaTxByTitle not implemented")
}
func (*UnimplementedDplatformServer) LoadParaTxByTitle(ctx context.Context, req *ReqHeightByTitle) (*ReplyHeightByTitle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadParaTxByTitle not implemented")
}
func (*UnimplementedDplatformServer) GetParaTxByHeight(ctx context.Context, req *ReqParaTxByHeight) (*ParaTxDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParaTxByHeight not implemented")
}
func (*UnimplementedDplatformServer) GetHeaders(ctx context.Context, req *ReqBlocks) (*Headers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeaders not implemented")
}

func RegisterDplatformServer(s *grpc.Server, srv DplatformServer) {
	s.RegisterService(&_Dplatform_serviceDesc, srv)
}

func _Dplatform_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBlocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetBlocks(ctx, req.(*ReqBlocks))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetLastHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetLastHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetLastHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetLastHeader(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_CreateRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).CreateRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/CreateRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).CreateRawTransaction(ctx, req.(*CreateTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_CreateRawTxGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).CreateRawTxGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/CreateRawTxGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).CreateRawTxGroup(ctx, req.(*CreateTransactionGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_QueryTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).QueryTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/QueryTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).QueryTransaction(ctx, req.(*ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).SendTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetTransactionByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetTransactionByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetTransactionByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetTransactionByAddr(ctx, req.(*ReqAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetTransactionByHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetTransactionByHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetTransactionByHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetTransactionByHashes(ctx, req.(*ReqHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetMemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMempool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetMemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetMemPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetMemPool(ctx, req.(*ReqGetMempool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetAccounts(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetAccount(ctx, req.(*ReqGetAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNewAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).NewAccount(ctx, req.(*ReqNewAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_WalletTransactionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletTransactionList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).WalletTransactionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/WalletTransactionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).WalletTransactionList(ctx, req.(*ReqWalletTransactionList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_ImportPrivkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletImportPrivkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).ImportPrivkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/ImportPrivkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).ImportPrivkey(ctx, req.(*ReqWalletImportPrivkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_SendToAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSendToAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).SendToAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/SendToAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).SendToAddress(ctx, req.(*ReqWalletSendToAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_SetTxFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSetFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).SetTxFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/SetTxFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).SetTxFee(ctx, req.(*ReqWalletSetFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_SetLabl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSetLabel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).SetLabl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/SetLabl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).SetLabl(ctx, req.(*ReqWalletSetLabel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_MergeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletMergeBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).MergeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/MergeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).MergeBalance(ctx, req.(*ReqWalletMergeBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_SetPasswd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSetPasswd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).SetPasswd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/SetPasswd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).SetPasswd(ctx, req.(*ReqWalletSetPasswd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).Lock(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_UnLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletUnLock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).UnLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/UnLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).UnLock(ctx, req.(*WalletUnLock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetLastMemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetLastMemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetLastMemPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetLastMemPool(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetProperFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqProperFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetProperFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetProperFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetProperFee(ctx, req.(*ReqProperFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetWalletStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetWalletStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetWalletStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetWalletStatus(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetBlockOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetBlockOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetBlockOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetBlockOverview(ctx, req.(*ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetAddrOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetAddrOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetAddrOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetAddrOverview(ctx, req.(*ReqAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetBlockHash(ctx, req.(*ReqInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GenSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenSeedLang)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GenSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GenSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GenSeed(ctx, req.(*GenSeedLang))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeedByPw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetSeed(ctx, req.(*GetSeedByPw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_SaveSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSeedByPw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).SaveSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/SaveSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).SaveSeed(ctx, req.(*SaveSeedByPw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetBalance(ctx, req.(*ReqBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_QueryChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainExecutor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).QueryChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/QueryChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).QueryChain(ctx, req.(*ChainExecutor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_ExecWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainExecutor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).ExecWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/ExecWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).ExecWallet(ctx, req.(*ChainExecutor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_QueryConsensus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainExecutor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).QueryConsensus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/QueryConsensus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).QueryConsensus(ctx, req.(*ChainExecutor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTxIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).CreateTransaction(ctx, req.(*CreateTxIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetHexTxByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetHexTxByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetHexTxByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetHexTxByHash(ctx, req.(*ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_DumpPrivkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).DumpPrivkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/DumpPrivkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).DumpPrivkey(ctx, req.(*ReqString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_DumpPrivkeysFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPrivkeysFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).DumpPrivkeysFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/DumpPrivkeysFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).DumpPrivkeysFile(ctx, req.(*ReqPrivkeysFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_ImportPrivkeysFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPrivkeysFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).ImportPrivkeysFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/ImportPrivkeysFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).ImportPrivkeysFile(ctx, req.(*ReqPrivkeysFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).Version(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_IsSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).IsSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/IsSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).IsSync(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetPeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetPeerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetPeerInfo(ctx, req.(*P2PGetPeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_NetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetNetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).NetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/NetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).NetInfo(ctx, req.(*P2PGetNetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_IsNtpClockSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).IsNtpClockSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/IsNtpClockSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).IsNtpClockSync(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetFatalFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetFatalFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetFatalFailure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetFatalFailure(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetLastBlockSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetLastBlockSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetLastBlockSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetLastBlockSequence(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetSequenceByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetSequenceByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetSequenceByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetSequenceByHash(ctx, req.(*ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetBlockByHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetBlockByHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetBlockByHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetBlockByHashes(ctx, req.(*ReqHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetBlockBySeq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetBlockBySeq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetBlockBySeq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetBlockBySeq(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_CloseQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).CloseQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/CloseQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).CloseQueue(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetAllExecBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAllExecBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetAllExecBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetAllExecBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetAllExecBalance(ctx, req.(*ReqAllExecBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_SignRawTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSignRawTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).SignRawTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/SignRawTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).SignRawTx(ctx, req.(*ReqSignRawTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_CreateNoBalanceTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoBalanceTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).CreateNoBalanceTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/CreateNoBalanceTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).CreateNoBalanceTransaction(ctx, req.(*NoBalanceTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_QueryRandNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRandHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).QueryRandNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/QueryRandNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).QueryRandNum(ctx, req.(*ReqRandHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetFork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetFork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetFork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetFork(ctx, req.(*ReqKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_CreateNoBalanceTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoBalanceTxs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).CreateNoBalanceTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/CreateNoBalanceTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).CreateNoBalanceTxs(ctx, req.(*NoBalanceTxs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetParaTxByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqParaTxByTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetParaTxByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetParaTxByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetParaTxByTitle(ctx, req.(*ReqParaTxByTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_LoadParaTxByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHeightByTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).LoadParaTxByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/LoadParaTxByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).LoadParaTxByTitle(ctx, req.(*ReqHeightByTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetParaTxByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqParaTxByHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetParaTxByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetParaTxByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetParaTxByHeight(ctx, req.(*ReqParaTxByHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dplatform_GetHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBlocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformServer).GetHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatform/GetHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformServer).GetHeaders(ctx, req.(*ReqBlocks))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dplatform_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.dplatform",
	HandlerType: (*DplatformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlocks",
			Handler:    _Dplatform_GetBlocks_Handler,
		},
		{
			MethodName: "GetLastHeader",
			Handler:    _Dplatform_GetLastHeader_Handler,
		},
		{
			MethodName: "CreateRawTransaction",
			Handler:    _Dplatform_CreateRawTransaction_Handler,
		},
		{
			MethodName: "CreateRawTxGroup",
			Handler:    _Dplatform_CreateRawTxGroup_Handler,
		},
		{
			MethodName: "QueryTransaction",
			Handler:    _Dplatform_QueryTransaction_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _Dplatform_SendTransaction_Handler,
		},
		{
			MethodName: "GetTransactionByAddr",
			Handler:    _Dplatform_GetTransactionByAddr_Handler,
		},
		{
			MethodName: "GetTransactionByHashes",
			Handler:    _Dplatform_GetTransactionByHashes_Handler,
		},
		{
			MethodName: "GetMemPool",
			Handler:    _Dplatform_GetMemPool_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _Dplatform_GetAccounts_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Dplatform_GetAccount_Handler,
		},
		{
			MethodName: "NewAccount",
			Handler:    _Dplatform_NewAccount_Handler,
		},
		{
			MethodName: "WalletTransactionList",
			Handler:    _Dplatform_WalletTransactionList_Handler,
		},
		{
			MethodName: "ImportPrivkey",
			Handler:    _Dplatform_ImportPrivkey_Handler,
		},
		{
			MethodName: "SendToAddress",
			Handler:    _Dplatform_SendToAddress_Handler,
		},
		{
			MethodName: "SetTxFee",
			Handler:    _Dplatform_SetTxFee_Handler,
		},
		{
			MethodName: "SetLabl",
			Handler:    _Dplatform_SetLabl_Handler,
		},
		{
			MethodName: "MergeBalance",
			Handler:    _Dplatform_MergeBalance_Handler,
		},
		{
			MethodName: "SetPasswd",
			Handler:    _Dplatform_SetPasswd_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _Dplatform_Lock_Handler,
		},
		{
			MethodName: "UnLock",
			Handler:    _Dplatform_UnLock_Handler,
		},
		{
			MethodName: "GetLastMemPool",
			Handler:    _Dplatform_GetLastMemPool_Handler,
		},
		{
			MethodName: "GetProperFee",
			Handler:    _Dplatform_GetProperFee_Handler,
		},
		{
			MethodName: "GetWalletStatus",
			Handler:    _Dplatform_GetWalletStatus_Handler,
		},
		{
			MethodName: "GetBlockOverview",
			Handler:    _Dplatform_GetBlockOverview_Handler,
		},
		{
			MethodName: "GetAddrOverview",
			Handler:    _Dplatform_GetAddrOverview_Handler,
		},
		{
			MethodName: "GetBlockHash",
			Handler:    _Dplatform_GetBlockHash_Handler,
		},
		{
			MethodName: "GenSeed",
			Handler:    _Dplatform_GenSeed_Handler,
		},
		{
			MethodName: "GetSeed",
			Handler:    _Dplatform_GetSeed_Handler,
		},
		{
			MethodName: "SaveSeed",
			Handler:    _Dplatform_SaveSeed_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Dplatform_GetBalance_Handler,
		},
		{
			MethodName: "QueryChain",
			Handler:    _Dplatform_QueryChain_Handler,
		},
		{
			MethodName: "ExecWallet",
			Handler:    _Dplatform_ExecWallet_Handler,
		},
		{
			MethodName: "QueryConsensus",
			Handler:    _Dplatform_QueryConsensus_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _Dplatform_CreateTransaction_Handler,
		},
		{
			MethodName: "GetHexTxByHash",
			Handler:    _Dplatform_GetHexTxByHash_Handler,
		},
		{
			MethodName: "DumpPrivkey",
			Handler:    _Dplatform_DumpPrivkey_Handler,
		},
		{
			MethodName: "DumpPrivkeysFile",
			Handler:    _Dplatform_DumpPrivkeysFile_Handler,
		},
		{
			MethodName: "ImportPrivkeysFile",
			Handler:    _Dplatform_ImportPrivkeysFile_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Dplatform_Version_Handler,
		},
		{
			MethodName: "IsSync",
			Handler:    _Dplatform_IsSync_Handler,
		},
		{
			MethodName: "GetPeerInfo",
			Handler:    _Dplatform_GetPeerInfo_Handler,
		},
		{
			MethodName: "NetInfo",
			Handler:    _Dplatform_NetInfo_Handler,
		},
		{
			MethodName: "IsNtpClockSync",
			Handler:    _Dplatform_IsNtpClockSync_Handler,
		},
		{
			MethodName: "GetFatalFailure",
			Handler:    _Dplatform_GetFatalFailure_Handler,
		},
		{
			MethodName: "GetLastBlockSequence",
			Handler:    _Dplatform_GetLastBlockSequence_Handler,
		},
		{
			MethodName: "GetSequenceByHash",
			Handler:    _Dplatform_GetSequenceByHash_Handler,
		},
		{
			MethodName: "GetBlockByHashes",
			Handler:    _Dplatform_GetBlockByHashes_Handler,
		},
		{
			MethodName: "GetBlockBySeq",
			Handler:    _Dplatform_GetBlockBySeq_Handler,
		},
		{
			MethodName: "CloseQueue",
			Handler:    _Dplatform_CloseQueue_Handler,
		},
		{
			MethodName: "GetAllExecBalance",
			Handler:    _Dplatform_GetAllExecBalance_Handler,
		},
		{
			MethodName: "SignRawTx",
			Handler:    _Dplatform_SignRawTx_Handler,
		},
		{
			MethodName: "CreateNoBalanceTransaction",
			Handler:    _Dplatform_CreateNoBalanceTransaction_Handler,
		},
		{
			MethodName: "QueryRandNum",
			Handler:    _Dplatform_QueryRandNum_Handler,
		},
		{
			MethodName: "GetFork",
			Handler:    _Dplatform_GetFork_Handler,
		},
		{
			MethodName: "CreateNoBalanceTxs",
			Handler:    _Dplatform_CreateNoBalanceTxs_Handler,
		},
		{
			MethodName: "GetParaTxByTitle",
			Handler:    _Dplatform_GetParaTxByTitle_Handler,
		},
		{
			MethodName: "LoadParaTxByTitle",
			Handler:    _Dplatform_LoadParaTxByTitle_Handler,
		},
		{
			MethodName: "GetParaTxByHeight",
			Handler:    _Dplatform_GetParaTxByHeight_Handler,
		},
		{
			MethodName: "GetHeaders",
			Handler:    _Dplatform_GetHeaders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
